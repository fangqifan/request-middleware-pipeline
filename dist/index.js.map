{"version":3,"file":"index.js","sources":["../src/middlewareManager.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/babel-runtime/regenerator/index.js","../src/middleware.js","../src/middlewareContext.js"],"sourcesContent":["import {Middleware} from './middleware';\r\nimport {MiddlewareContext} from './middlewareContext';\r\n\r\nconst lastMiddleware = new Middleware();\r\n\r\nfunction buildMiddlewareChains(registedItems, index = 0) {\r\n    if (index === registedItems.length) {\r\n        return lastMiddleware;\r\n    }\r\n    if (registedItems[index].type === 'type') {\r\n        return Reflect.construct(registedItems[index].target, [buildMiddlewareChains(registedItems, index + 1)].concat(registedItems[index].args));\r\n    }\r\n    if (registedItems[index].type === 'instance') {\r\n        registedItems[index].target.setNextMiddleware(buildMiddlewareChains(registedItems, index + 1));\r\n        return registedItems[index].target;\r\n    }\r\n}\r\n\r\nconst privateNames = {\r\n    registedItems: Symbol(\"registedItems\")\r\n}\r\n\r\nexport class MiddlewareManager {\r\n    constructor() {\r\n        this[privateNames.registedItems] = [];\r\n    }\r\n\r\n    registerType(type, ...args) {\r\n        if (typeof (type) !== 'function' ||\r\n            (type != Middleware && !Middleware.prototype.isPrototypeOf(type.prototype))) {\r\n            throw 'type is not extends from Middleware';\r\n        }\r\n        this[privateNames.registedItems].push({\r\n            type: 'type',\r\n            target: type,\r\n            args: args\r\n        });\r\n        return this;\r\n    }\r\n\r\n    registerInstance(instance) {\r\n        if (!(instance instanceof Middleware)) {\r\n            throw 'type is not a Middleware';\r\n        }\r\n        this[privateNames.registedItems].push({\r\n            type: 'instance',\r\n            target: instance,\r\n            args: []\r\n        });\r\n        return this;\r\n    }\r\n\r\n    clear() {\r\n        this[privateNames.registedItems].length = 0;\r\n    }\r\n\r\n    async request(data = {}) {\r\n        const middlewareContext = new MiddlewareContext(this, data);\r\n        const firstMiddleware = buildMiddlewareChains(this[privateNames.registedItems]);\r\n        await firstMiddleware.invoke(middlewareContext);\r\n        return data;\r\n    }\r\n}\r\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","module.exports = require(\"regenerator-runtime\");\n","const privateNames = {\r\n    nextMiddleware: Symbol('nextMiddleware')\r\n};\r\n\r\nexport class Middleware {\r\n    constructor(nextMiddleware) {\r\n        if (nextMiddleware) {\r\n            this.setNextMiddleware(nextMiddleware);\r\n        }\r\n    }\r\n\r\n    setNextMiddleware(nextMiddleware) {\r\n        if (nextMiddleware) {\r\n            if (!(nextMiddleware instanceof Middleware)) {\r\n                throw 'nextMiddleware is not Middleware';\r\n            }\r\n        }\r\n        this[privateNames.nextMiddleware] = nextMiddleware;\r\n    }\r\n\r\n    async next(middlewareContext) {\r\n        if (this[privateNames.nextMiddleware]) {\r\n            await this[privateNames.nextMiddleware].invoke(middlewareContext);\r\n        }\r\n    }\r\n\r\n    invoke(){\r\n        \r\n    }\r\n}\r\n","import {MiddlewareManager} from './middlewareManager';\r\n\r\nconst privateNames = {\r\n    data: Symbol('data'),\r\n    middlewareManager: Symbol('middlewareManager')\r\n};\r\n\r\nexport class MiddlewareContext {\r\n    constructor(middlewareManager, data = {}) {\r\n        if (!(middlewareManager instanceof MiddlewareManager)) {\r\n            throw 'middlewareManager must be MiddlewareManager';\r\n        }\r\n        this[privateNames.middlewareManager] = middlewareManager;\r\n        this[privateNames.data] = data;\r\n    }\r\n\r\n    get middlewareManager() {\r\n        return this[privateNames.middlewareManager];\r\n    }\r\n\r\n    get data() {\r\n        return this[privateNames.data];\r\n    }\r\n}\r\n"],"names":["buildMiddlewareChains","registedItems","index","length","lastMiddleware","type","Reflect","construct","target","concat","args","setNextMiddleware","global","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","prototype","Generator","generator","Object","create","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","obj","arg","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","this","AsyncIterator","invoke","resolve","reject","record","result","value","hasOwn","Promise","__await","then","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","done","GenStateSuspendedYield","iterator","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","i","Op","hasOwnProperty","$Symbol","Symbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","runtime","regeneratorRuntime","module","exports","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","Function","g","hadRuntime","getOwnPropertyNames","indexOf","oldRuntime","require$$0","e","privateNames","Middleware","nextMiddleware","middlewareContext","MiddlewareContext","middlewareManager","data","MiddlewareManager","isPrototypeOf","instance","firstMiddleware"],"mappings":"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"}